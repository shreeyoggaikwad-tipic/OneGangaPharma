import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  Bell,
  Check,
  CheckCircle2,
  Clock,
  FileText,
  Package,
  ShoppingCart,
  Trash2,
  AlertTriangle,
  RefreshCw,
  Users,
  TrendingUp,
  Settings,
  Filter,
} from "lucide-react";

interface Notification {
  id: number;
  type: string;
  title: string;
  message: string;
  isRead: boolean;
  createdAt: string;
}

export default function AdminNotifications() {
  const [filter, setFilter] = useState<"all" | "unread" | "system" | "orders" | "prescriptions">("all");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: notifications = [], isLoading } = useQuery<Notification[]>({
    queryKey: ["/api/notifications"],
  });

  const markAsReadMutation = useMutation({
    mutationFn: async (notificationId: number) => {
      await apiRequest("PUT", `/api/notifications/${notificationId}/read`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notifications"] });
      toast({
        title: "Success",
        description: "Notification marked as read",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to mark notification as read",
        variant: "destructive",
      });
    },
  });

  const markAllAsReadMutation = useMutation({
    mutationFn: async () => {
      const unreadNotifications = notifications.filter(n => !n.isRead);
      await Promise.all(
        unreadNotifications.map(n => 
          apiRequest("PUT", `/api/notifications/${n.id}/read`)
        )
      );
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notifications"] });
      toast({
        title: "Success",
        description: "All notifications marked as read",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to mark all notifications as read",
        variant: "destructive",
      });
    },
  });

  const deleteNotificationMutation = useMutation({
    mutationFn: async (notificationId: number) => {
      await apiRequest("DELETE", `/api/notifications/${notificationId}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notifications"] });
      toast({
        title: "Success",
        description: "Notification deleted successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to delete notification",
        variant: "destructive",
      });
    },
  });

  const clearAllNotificationsMutation = useMutation({
    mutationFn: async () => {
      await Promise.all(
        notifications.map(n => 
          apiRequest("DELETE", `/api/notifications/${n.id}`)
        )
      );
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notifications"] });
      toast({
        title: "Success",
        description: "All notifications cleared successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to clear all notifications",
        variant: "destructive",
      });
    },
  });

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case "order_status":
        return <ShoppingCart className="h-5 w-5 text-blue-600" />;
      case "prescription_upload":
        return <FileText className="h-5 w-5 text-green-600" />;
      case "prescription_status":
        return <FileText className="h-5 w-5 text-purple-600" />;
      case "low_stock":
        return <Package className="h-5 w-5 text-orange-600" />;
      case "new_user":
        return <Users className="h-5 w-5 text-indigo-600" />;
      case "system":
        return <Settings className="h-5 w-5 text-gray-600" />;
      default:
        return <Bell className="h-5 w-5 text-gray-600" />;
    }
  };

  const getNotificationColor = (type: string, isRead: boolean) => {
    const baseColors = {
      order_status: "border-l-blue-500",
      prescription_upload: "border-l-green-500",
      prescription_status: "border-l-purple-500",
      low_stock: "border-l-orange-500",
      new_user: "border-l-indigo-500",
      system: "border-l-gray-500",
    };
    
    const color = baseColors[type as keyof typeof baseColors] || "border-l-gray-500";
    return `${color} ${isRead ? "bg-white" : "bg-blue-50"}`;
  };

  const getPriorityBadge = (type: string) => {
    switch (type) {
      case "low_stock":
        return <Badge variant="destructive" className="text-xs">High Priority</Badge>;
      case "prescription_upload":
        return <Badge variant="default" className="text-xs bg-blue-600">Review Required</Badge>;
      case "new_user":
        return <Badge variant="secondary" className="text-xs">Info</Badge>;
      default:
        return null;
    }
  };

  const filteredNotifications = notifications.filter(notification => {
    if (filter === "all") return true;
    if (filter === "unread") return !notification.isRead;
    if (filter === "system") return notification.type === "system";
    if (filter === "orders") return notification.type.includes("order");
    if (filter === "prescriptions") return notification.type.includes("prescription");
    return true;
  });

  const unreadCount = notifications.filter(n => !n.isRead).length;
  const criticalCount = notifications.filter(n => !n.isRead && (n.type === "low_stock" || n.type === "prescription_upload")).length;

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    // Ensure we're working with valid dates
    if (isNaN(date.getTime()) || isNaN(now.getTime())) {
      return "Invalid date";
    }

    const diffInMs = now.getTime() - date.getTime();

    // Handle future dates (should show as "Just now" if within 1 minute)
    if (diffInMs < 0) {
      return Math.abs(diffInMs) < 60000 ? "Just now" : "Future date";
    }

    const diffInSeconds = diffInMs / 1000;
    const diffInMinutes = diffInSeconds / 60;
    const diffInHours = diffInMinutes / 60;
    const diffInDays = diffInHours / 24;

    // Debug logging (remove this after testing)
    console.log('Date comparison:', {
      original: dateString,
      parsed: date.toISOString(),
      now: now.toISOString(),
      diffInMs,
      diffInSeconds,
      diffInMinutes
    });

    if (diffInSeconds < 60) {
      return "Just now";
    } else if (diffInMinutes < 60) {
      const minutes = Math.floor(diffInMinutes);
      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
    } else if (diffInHours < 24) {
      const hours = Math.floor(diffInHours);
      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
    } else if (diffInDays < 7) {
      const days = Math.floor(diffInDays);
      return `${days} day${days !== 1 ? 's' : ''} ago`;
    } else {
      return date.toLocaleDateString('en-IN', {
        day: 'numeric',
        month: 'short',
        year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
      });
    }
  };

  const getFilterCounts = () => ({
    all: notifications.length,
    unread: unreadCount,
    system: notifications.filter(n => n.type === "system").length,
    orders: notifications.filter(n => n.type.includes("order")).length,
    prescriptions: notifications.filter(n => n.type.includes("prescription")).length,
  });

  const counts = getFilterCounts();

  return (
    <div className="container mx-auto px-4 py-6 max-w-6xl">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <Bell className="h-8 w-8 text-blue-600" />
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Admin Notifications</h1>
            <p className="text-gray-600">
              {unreadCount > 0 ? (
                <>
                  {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}
                  {criticalCount > 0 && <span className="text-red-600 font-medium"> â€¢ {criticalCount} critical</span>}
                </>
              ) : (
                'All notifications read'
              )}
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => queryClient.invalidateQueries({ queryKey: ["/api/notifications"] })}
          >
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          {unreadCount > 0 && (
            <Button
              variant="default"
              size="sm"
              onClick={() => markAllAsReadMutation.mutate()}
              disabled={markAllAsReadMutation.isPending}
            >
              <CheckCircle2 className="h-4 w-4 mr-2" />
              Mark All Read
            </Button>
          )}
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button
                variant="destructive"
                size="sm"
                disabled={clearAllNotificationsMutation.isPending || notifications.length === 0}
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Clear All
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Clear All Notifications</AlertDialogTitle>
                <AlertDialogDescription>
                  Are you sure you want to delete all notifications? This action cannot be undone and will permanently remove all notifications from the system.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction
                  onClick={() => clearAllNotificationsMutation.mutate()}
                  className="bg-red-600 hover:bg-red-700"
                >
                  Clear All Notifications
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card className="bg-blue-50 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-blue-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-blue-800">{notifications.length}</p>
              </div>
              <Bell className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-orange-50 border-orange-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-orange-600 font-medium">Unread</p>
                <p className="text-2xl font-bold text-orange-800">{unreadCount}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-orange-600" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-red-50 border-red-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-red-600 font-medium">Critical</p>
                <p className="text-2xl font-bold text-red-800">{criticalCount}</p>
              </div>
              <Package className="h-8 w-8 text-red-600" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-green-50 border-green-200">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-green-600 font-medium">Read Today</p>
                <p className="text-2xl font-bold text-green-800">
                  {notifications.filter(n => n.isRead && new Date(n.createdAt).toDateString() === new Date().toDateString()).length}
                </p>
              </div>
              <CheckCircle2 className="h-8 w-8 text-green-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filter Buttons */}
      <div className="flex flex-wrap gap-2 mb-6">
        <Button
          variant={filter === "all" ? "default" : "outline"}
          size="sm"
          onClick={() => setFilter("all")}
        >
          All ({counts.all})
        </Button>
        <Button
          variant={filter === "unread" ? "default" : "outline"}
          size="sm"
          onClick={() => setFilter("unread")}
        >
          Unread ({counts.unread})
        </Button>
        <Button
          variant={filter === "orders" ? "default" : "outline"}
          size="sm"
          onClick={() => setFilter("orders")}
        >
          Orders ({counts.orders})
        </Button>
        <Button
          variant={filter === "prescriptions" ? "default" : "outline"}
          size="sm"
          onClick={() => setFilter("prescriptions")}
        >
          Prescriptions ({counts.prescriptions})
        </Button>
        <Button
          variant={filter === "system" ? "default" : "outline"}
          size="sm"
          onClick={() => setFilter("system")}
        >
          System ({counts.system})
        </Button>
      </div>

      {/* Notifications List */}
      <div className="space-y-4">
        {isLoading ? (
          Array.from({ length: 5 }).map((_, i) => (
            <Card key={i}>
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  <Skeleton className="h-10 w-10 rounded-full" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-3/4" />
                    <Skeleton className="h-3 w-1/2" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : filteredNotifications.length === 0 ? (
          <Card>
            <CardContent className="p-12 text-center">
              <Filter className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No notifications in this category
              </h3>
              <p className="text-gray-600">
                Try selecting a different filter or check back later for new notifications.
              </p>
            </CardContent>
          </Card>
        ) : (
          filteredNotifications.map((notification) => (
            <Card 
              key={notification.id} 
              className={`border-l-4 transition-all hover:shadow-md ${getNotificationColor(notification.type, notification.isRead)}`}
            >
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  <div className="flex-shrink-0 mt-1">
                    {getNotificationIcon(notification.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1 flex-wrap">
                          <h3 className={`font-medium ${notification.isRead ? 'text-gray-900' : 'text-gray-900 font-semibold'}`}>
                            {notification.title}
                          </h3>
                          {!notification.isRead && (
                            <Badge variant="secondary" className="bg-blue-100 text-blue-800 text-xs">
                              New
                            </Badge>
                          )}
                          {getPriorityBadge(notification.type)}
                        </div>
                        <p className={`text-sm ${notification.isRead ? 'text-gray-600' : 'text-gray-700'} mb-2`}>
                          {notification.message}
                        </p>
                        <div className="flex items-center gap-4 text-xs text-gray-500">
                          <span className="flex items-center gap-1">
                            <Clock className="h-3 w-3" />
                            {formatDate(notification.createdAt)}
                          </span>
                          <span className="capitalize">{notification.type.replace('_', ' ')}</span>
                        </div>
                      </div>
                      <div className="flex items-center gap-1">
                        {!notification.isRead && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => markAsReadMutation.mutate(notification.id)}
                            disabled={markAsReadMutation.isPending}
                            className="text-gray-500 hover:text-gray-700"
                          >
                            <Check className="h-4 w-4" />
                          </Button>
                        )}
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="text-gray-500 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Notification</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete this notification? This action cannot be undone and will permanently remove the notification from the system.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => deleteNotificationMutation.mutate(notification.id)}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                Delete Notification
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>

      {/* Empty State for No Notifications */}
      {!isLoading && notifications.length === 0 && (
        <Card>
          <CardContent className="p-12 text-center">
            <Bell className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-medium text-gray-900 mb-2">
              No notifications yet
            </h3>
            <p className="text-gray-600 mb-4">
              When there are new orders, prescription uploads, stock alerts, or system updates, they'll appear here.
            </p>
            <Button variant="outline" onClick={() => queryClient.invalidateQueries({ queryKey: ["/api/notifications"] })}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Check for Updates
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}